<h2>Symfony 2 Installation</h2>

<h3>Download the bundle</h3>
<p>Open a command console, enter your project directory and execute the following command to download the latest stable version of this bundle:</p>
<pre><code class="bash">$ php composer require nilportugues/jsonapi-bundle</code></pre>


<h3>Enable the bundle</h3>

Then, enable the bundle by adding it to the list of registered bundles in the <strong>app/AppKernel.php</strong> file of your project:

<pre><code class="php">// app/AppKernel.php

class AppKernel extends Kernel
{
    public function registerBundles()
    {
        $bundles = array(
            // ...
            new NilPortugues\Symfony2\JsonApiBundle\NilPortuguesSymfony2JsonApiBundle(),
        );
        // ...
    }
    // ...
}
</code></pre>



<h2>API Responses</h2>

<h3>Doctrine Entity to JSON API Response</h3>
<p>It is really easy, just get an instance of the JsonApiSerializer from the Service Container and pass the object to its serialize() method. Output will be valid JSON-API.</p>

<p>Here's an example of a Post object being fetched from a Doctrine repository.</p>

<p>Finally, a helper trait, JsonApiResponseTrait is provided to write fully compilant responses wrapping the PSR-7 Response objects provided by the original JSON API Transformer library.</p>

<pre><code class="php">// src/Acme\AppBundleApp\Controller\PostController.php

namespace Acme\AppBundle\Controller;

use NilPortugues\Symfony2\JsonApiBundle\Serializer\JsonApiResponseTrait;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Routing\Annotation\Route;

class PostController extends Controller
{
    use JsonApiResponseTrait;

    /**
     * @Route("/post/{postId}", name="get_post")
     *
     * @param $postId
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function getPostAction($postId)
    {
        $post = $this->get('doctrine.post_repository')->find($postId);

        $serializer = $this->get('nil_portugues.serializer.json_api_serializer');

        /** @var \NilPortugues\Api\JsonApi\JsonApiTransformer $transformer */
        $transformer = $serializer->getTransformer();
        $transformer->setSelfUrl($this->generateUrl('get_post', ['postId' => $postId], true));
        $transformer->setNextUrl($this->generateUrl('get_post', ['postId' => $postId+1], true));

        return $this->response($serializer->serialize($post));
    }
}
</code></pre>

<h3>JSON API Response</h3>

<pre class="json-headers">HTTP/1.1 200 OK
Cache-Control: private, max-age=0, must-revalidate
Content-type: application/vnd.api+json
</pre>

<pre class="json-output">{% include 'pages/output/api/jsonapi'  %}</pre>

<h2>Custom API Responses Headers</h2>

<h3>Creating a Response Trait</h3>
<p>It is possible, and a good practice to actually sign your APIs with custom headers, specially for API version. This can be done easily by overwriting the addHeaders method provided JsonApiResponseTrait trait class.</p>
<p>For instance, let's say we want to sign our API with our company name "Acme" and the current version, "2", using both the standard way of doing it and by adding a custom header, as such: </p>

<pre class="json-headers">HTTP/1.1 200 OK
Cache-Control: private, max-age=0, must-revalidate
Content-type: application/vnd.api+json; version=2
X-API: Acme API: 2
</pre>

<p>This is how it should be done:</p>


<pre><code class="php">// src/Acme\AppBundleApp\Controller\PostController.php

namespace Acme\AppBundle\Controller;

use NilPortugues\Symfony2\JsonApiBundle\Serializer\JsonApiResponseTrait;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Routing\Annotation\Route;

class PostController extends Controller
{
    use JsonApiResponseTrait;

    /**
     *  This method will override the JsonApiResponseTrait::addHeaders method.
     *  Extract this method to a parent Controller class to avoid repetition.
     *
     * @param \Psr\Http\Message\ResponseInterface $response
     * @return \Psr\Http\Message\ResponseInterface
     */
    protected function addHeaders(\Psr\Http\Message\ResponseInterface $response)
    {
        $response->withAddedHeader('Content-type:', 'application/vnd.api+json; version=2');
        $response->withAddedHeader('X-API:', 'ACME API: 2');
        return $response;
    }

    /**
     * @Route("/post/{postId}", name="get_post")
     *
     * @param $postId
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function getPostAction($postId)
    {
        $post = $this->get('doctrine.post_repository')->find($postId);

        $serializer = $this->get('nil_portugues.serializer.json_api_serializer');

        /** @var \NilPortugues\Api\JsonApi\JsonApiTransformer $transformer */
        $transformer = $serializer->getTransformer();
        $transformer->setSelfUrl($this->generateUrl('get_post', ['postId' => $postId], true));
        $transformer->setNextUrl($this->generateUrl('get_post', ['postId' => $postId+1], true));

        return $this->response($serializer->serialize($post));
    }
}
</code></pre>
