{% from 'components/tabs/paneled_tabs/paneled_tabs' import paneled_tabs as paneled_tabs %}

<h2>Laravel 5 Installation</h2>
<p>Open a command console, enter your project directory and execute the following command to download the latest stable version of the package:</p>

<pre><code class="bash">$ php composer require nilportugues/laravel5-json-api</code></pre>

<hr>

<h2>Configuration</h2>
<h3>Add the package to the Service Provider</h3>

<p>Open up <strong>config/app.php</strong> and add the following line under providers array:</p>

<pre><code class="php">{% include 'pages/output/api/laravel5/jsonapi-providers.twig' %}</code></pre>

<hr>

<h2>Register the mapping file</h2>
<p>Create a <strong>jsonapi.php</strong> file in <strong>config/</strong> directory. This file should return an array returning all the class mappings.</p>

<pre><code class="php">{% include 'pages/output/api/laravel5/jsonapi-mapping-array-empty' %}</code></pre>

<hr>

{% include 'pages/api/shared/laravel5/eloquent_models' %}


<h3>API Mappings for Eloquent Models</h3>

<p>Mapping classes only have one requirement, implement the <strong>JsonApiMapping Interface</strong>.</p>
<p>Once implemented these classes all it's left to do is register the mappings in the mapping file at <strong>config/jsonapi.php</strong></p>

<br>
{% include 'pages/api/shared/laravel5/eloquent_mapping' %}


<h3>Updating the mapping file</h3>

<p>Just update the contents of the mapping file <strong>app/config.php</strong>.</p>

<pre><code class="php">{% include 'pages/mappings/laravel5/mapping' %}</code></pre>

<hr>


<h2>Eloquent Models to API Responses</h2>

<p>It is really easy, just inject the JsonApiSerializer to the Controller's constructor method and save a reference to be used in all the action methods. For each method just call the serializer and pass in the data and it will handle it.</p>

<p>Finally, a helper trait, JsonApiResponseTrait is provided to write fully compliant responses wrapping the PSR-7 Response objects provided by the original JSON API Transformer library.</p>

<p>Here's an example of a User object being fetched from the database using Eloquent.</p>


<pre><code class="php">{% include 'pages/output/api/laravel5/jsonapi-controller' %}</code></pre>


<h3>JsonApiResponseTrait</h3>

<p>The JsonApiResponseTrait is provided to return the right headers and HTTP status codes. Methods available:</p>

<pre><code class="php">{% include 'pages/output/api/jsonapi-trait'  %}</code></pre>






<h3>JSON API Response</h3>

<pre class="json-headers">HTTP/1.1 200 OK
Cache-Control: private, max-age=0, must-revalidate
Content-type: application/vnd.api+json
</pre>

<pre class="json-output">{% include 'pages/output/api/jsonapi_json'  %}</pre>


<hr>



<h2>Custom API Response Headers</h2>

<h3>Creating a Response Trait</h3>
<p>It is possible, and a good practice to actually sign your APIs with custom headers, specially for API version. This can be done easily by overwriting the addHeaders method provided JsonApiResponseTrait trait class.</p>
<p>For instance, let's say we want to sign our API with our company name "Acme" and the current version, "2", using both the standard way of doing it and by adding a custom header, as such: </p>

<pre class="json-headers">HTTP/1.1 200 OK
Cache-Control: private, max-age=0, must-revalidate
Content-type: application/vnd.api+json; version=2
X-API: Acme API v2
</pre>

<p>This is how it should be done:</p>

<pre><code class="php">{% include 'pages/output/api/laravel5/jsonapi-controller-trait' %}</code></pre>


<p>Not too hard, right? </p>

<hr>

<h2>API Responses for Eloquent Collections</h2>

<p>Outputting collections is not harder than mapping an Eloquent model. Actually, it just works out of the box. What is important is deciding what how much information we'll be displaying.</p>

<p>For a collection, only main information should be displayed, which translates in removing some relationships data being returned by default.</p>

<p>In order to show, let's say a simplified view, without deleting the previous mappings, a new Model object must be created.</p>

<h3>Example: User and UserLite</h3>
<p>In this example, having User model, a new and simplified model with less data will be created: UserLite. The UserLite class will extend User.</p>

<p>Due to the nature of Eloquent, this object won't be referenced by anyone unless we code the relationships explicitly, so all related data will be not serialized, which is good. </p>

<p>Here's how this would be done:</p>

<br>
{% set laravel5_user_lite_mapping %}<pre><code class="php">{% include 'pages/models/laravel5/user_lite' %}</code></pre>{% endset %}
{% set laravel5_user_lite_transformer %}<pre><code class="php">{% include 'pages/mappings/laravel5/user_lite' %}</code></pre>{% endset %}
{% set laravel5_lite_mapping %}<pre><code class="php">{% include 'pages/mappings/laravel5/mapping_with_lite' %}</code></pre>{% endset %}



<div class="row-fluid">
    {{
    paneled_tabs(
        {
            "laravel5_user_lite_mapping" : "Eloquent Model",
            "laravel5_user_lite_transformer" : "API Mapping",
            "laravel5_lite_mapping" : "config/jsonapi.php",
        },
        {
            "laravel5_user_lite_mapping" : laravel5_user_lite_mapping,
            "laravel5_user_lite_transformer" : laravel5_user_lite_transformer,
            "laravel5_lite_mapping" : laravel5_lite_mapping,
        },
        "laravel5_user_lite_mapping",
        ""
    )
    }}
</div>




<h3>JSON API Response</h3>

<pre class="json-headers">HTTP/1.1 200 OK
Cache-Control: private, max-age=0, must-revalidate
Content-type: application/vnd.api+json; version=2
X-API: Acme API v2
</pre>

<pre class="json-output">{% include 'pages/output/api/jsonapi_json_collection'  %}</pre>

<hr>

<h2>Filtering with URL query parameters</h2>

<h3>JSON API Query Parameters</h3>
<p>According to the JSON API specification, it is possible to filter data based on criteria passed in using the Query Parameters.</p>
<ul>
    <li>&filter[resource]=field1,field2</li>
    <li>&include[resource]</li>
    <li>&include[resource.field1]</li>
    <li>&sort=field1,-field2</li>
    <li>&sort=-field1,field2</li>
    <li>&page[number]</li>
    <li>&page[limit]</li>
    <li>&page[cursor]</li>
    <li>&page[offset]</li>
    <li>&page[size]</li>
</ul>

<h3>JSON API Request class</h3>
<p>Conveniently, the JSON-API Transformer library happens to provide a helper class to handle this: <strong>\NilPortugues\Api\JsonApi\Http\Message\Request(ServerRequestInterface $request)</strong>, implementing the PSR-7 Request Interface.</p>

<pre><code class="php">{% include 'pages/output/api/json-api-request' %}</code></pre>

<h3>Usage example</h3>